/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.iris.ui.eventmanager;

import com.iris.backend.controller.EventController;
import com.iris.backend.model.Event;
import com.iris.backend.model.User;
import com.iris.backend.service.EventService;
import com.iris.backend.service.UserService;
import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sushanthkumarreddyjanga
 */
public class EventManagerDashboard extends javax.swing.JPanel {

    /**
     * Creates new form EventManagerDashboard
     */
    ArrayList<User> userData;
    EventService eventService;
    UserService userService;
    JSplitPane jRightSplitPane;
    EventController eventController;
    int publicClick = 0;
    int privateClick = 0;

    public EventManagerDashboard(ArrayList<User> userData, JSplitPane jRightSplitPane) throws SQLException {

        initComponents();

        this.userData = userData;
        this.jRightSplitPane = jRightSplitPane;
        eventService = new EventService();
        eventController = new EventController();
        populateTableData("all");
        eventTable.fixTable(jScrollPane3);
        AccomodationCount.setVisible(true);
        CaterCount.setVisible(true);
        TravelCount.setVisible(true);
        populateCardData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLocation2 = new javax.swing.JLabel();
        jPrivateEvent = new com.iris.ui.resources.Card();
        jRefreshTableBtn2 = new com.iris.ui.resources.ButtonBadges();
        jPublicEvent = new com.iris.ui.resources.Card();
        Name = new com.iris.ui.resources.TextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        EmailId = new com.iris.ui.resources.TextField();
        PhoneNumber = new com.iris.ui.resources.TextField();
        PostalCode = new com.iris.ui.resources.TextField();
        Accomodation = new com.iris.ui.resources.TextField();
        Catering = new com.iris.ui.resources.TextField();
        Travel = new com.iris.ui.resources.TextField();
        EventDate = new com.iris.ui.resources.TextField();
        AccomodationCount = new com.iris.ui.resources.TextField();
        TravelCount = new com.iris.ui.resources.TextField();
        CaterCount = new com.iris.ui.resources.TextField();
        requestButton = new com.iris.ui.resources.Button();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        eventTable = new com.iris.ui.resources.Table();

        setMaximumSize(new java.awt.Dimension(1196, 720));
        setMinimumSize(new java.awt.Dimension(1196, 720));
        setPreferredSize(new java.awt.Dimension(1196, 720));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setToolTipText("");
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel1.setBackground(new java.awt.Color(245, 241, 241));
        jPanel1.setMaximumSize(new java.awt.Dimension(1196, 720));
        jPanel1.setMinimumSize(new java.awt.Dimension(1196, 720));

        jLocation2.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLocation2.setForeground(new java.awt.Color(4, 72, 210));
        jLocation2.setText("Event Manager / Dashboard");

        jPrivateEvent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPrivateEventMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPrivateEventMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPrivateEventMouseExited(evt);
            }
        });

        jRefreshTableBtn2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iris/ui/icons/refresh.png")));
        jRefreshTableBtn2.setMaximumSize(new java.awt.Dimension(20, 20));
        jRefreshTableBtn2.setMinimumSize(new java.awt.Dimension(20, 20));
        jRefreshTableBtn2.setPreferredSize(new java.awt.Dimension(20, 20));
        jRefreshTableBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRefreshTableBtn2ActionPerformed(evt);
            }
        });

        jPublicEvent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPublicEventMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPublicEventMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPublicEventMouseExited(evt);
            }
        });

        Name.setEditable(false);
        Name.setLabelText("Name");

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel3.setText("Customer details");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel4.setText("Event details");

        EmailId.setEditable(false);
        EmailId.setLabelText("Email ID");

        PhoneNumber.setEditable(false);
        PhoneNumber.setLabelText("Phone Number");

        PostalCode.setEditable(false);
        PostalCode.setLabelText("Postal Code");

        Accomodation.setEditable(false);
        Accomodation.setLabelText("Accomodation needed");

        Catering.setEditable(false);
        Catering.setLabelText("Catering needed");
        Catering.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CateringActionPerformed(evt);
            }
        });

        Travel.setEditable(false);
        Travel.setLabelText("Travel needed");

        EventDate.setEditable(false);
        EventDate.setLabelText("Event To-From");

        AccomodationCount.setEditable(false);
        AccomodationCount.setLabelText("Count");

        TravelCount.setEditable(false);
        TravelCount.setLabelText("Count");

        CaterCount.setEditable(false);
        CaterCount.setLabelText("Count");

        requestButton.setBackground(new java.awt.Color(255, 153, 0));
        requestButton.setText("Manage requests");
        requestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        eventTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Event ID", "Name", "Type", "Description", "Area", "Attendees Count", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        eventTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eventTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(eventTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 883, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPrivateEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(jPublicEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(PhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(PostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(EmailId, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(35, 35, 35)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(EventDate, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(Catering, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(35, 35, 35)
                                                .addComponent(CaterCount, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(Travel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(35, 35, 35)
                                                .addComponent(TravelCount, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3))
                                        .addGap(35, 35, 35)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(Accomodation, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(35, 35, 35)
                                                .addComponent(AccomodationCount, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(requestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLocation2)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jRefreshTableBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 502, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLocation2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPrivateEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPublicEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(jRefreshTableBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Accomodation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AccomodationCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EmailId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Catering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CaterCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Travel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TravelCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EventDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(83, 83, 83))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(requestButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1196, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jPrivateEventMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPrivateEventMouseClicked

        jPrivateEvent.setBackground(Color.CYAN);
        jPublicEvent.setBackground(Color.white);

        try {
            //Refresh Table Data
            populateTableData("PRIVATE");
        } catch (SQLException ex) {
        }
        publicClick = 0;
        privateClick = 1;
    }//GEN-LAST:event_jPrivateEventMouseClicked

    private void jPrivateEventMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPrivateEventMouseEntered
        //        // TODO add your handling code here:
        jPrivateEvent.setBackground(Color.CYAN);
    }//GEN-LAST:event_jPrivateEventMouseEntered

    private void jPrivateEventMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPrivateEventMouseExited
        // TODO add your handling code here:
        if (privateClick == 1 && publicClick == 0) {
            jPrivateEvent.setBackground(Color.CYAN);
            return;
        }
        jPrivateEvent.setBackground(Color.white);
        privateClick = 0;
    }//GEN-LAST:event_jPrivateEventMouseExited

    private void jRefreshTableBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRefreshTableBtn2ActionPerformed
        try {
            populateTableData("ALL");
        } catch (SQLException ex) {
        }
        //Reset card colors
        jPrivateEvent.setBackground(Color.white);
        jPublicEvent.setBackground(Color.white);
        //Reset card click counter
        publicClick = 0;
        privateClick = 0;
//                travelClick = 0;
    }//GEN-LAST:event_jRefreshTableBtn2ActionPerformed

    private void eventTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventTableMouseClicked

        int selectedRowIndex = eventTable.getSelectedRow();
//            System.out.println(selectedRowIndex);
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) eventTable.getModel();
        Event e = (Event) model.getValueAt(selectedRowIndex, 0);
//            System.out.println("selectedEvent");

        int user_id = e.getUserID();
        try {
            UserService userService = new UserService();
            ArrayList<User> userList = userService.getAllUsers();

            for (User u : userList) {

                if (u.getID() == user_id) {
                    Name.setText(u.getName());
                    EmailId.setText(u.getEmail());
                    PhoneNumber.setText(u.getPhoneNum());
                    PostalCode.setText(u.getPostalCode());
                }
            }
//            
//            Email
        } catch (SQLException ex) {
            Logger.getLogger(EventManagerDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }

        Accomodation.setText(e.getAccomodationNeeded().equalsIgnoreCase("null") ? "" : e.getAccomodationNeeded());
        if (e.getAccomodationNeeded().equalsIgnoreCase("yes")) {
            AccomodationCount.setVisible(true);
            AccomodationCount.setText(String.valueOf(e.getAccomodationCount()));
        }else if(e.getFunctionHallNeeded().equalsIgnoreCase("yes")){
            Accomodation.setText("Function Hall");
            AccomodationCount.setVisible(true);
            AccomodationCount.setText(String.valueOf(e.getFunctionHallCount()));
        }
        Catering.setText(e.getCateringNeeded().equalsIgnoreCase("null") ? "" : e.getCateringNeeded());
        if (e.getCateringNeeded().equalsIgnoreCase("yes")) {
            CaterCount.setVisible(true);
            CaterCount.setText(String.valueOf(e.getCateringCount()));
        }
        Travel.setText(e.getTravelNeeded().equalsIgnoreCase("null") ? "" : e.getTravelNeeded());
        if (e.getTravelNeeded().equalsIgnoreCase("yes")) {
            TravelCount.setVisible(true);
            TravelCount.setText(String.valueOf(e.getTravelCount()));
        }
        String event_to = e.getEventTo();
        String event_from = e.getEventFrom();
        EventDate.setText(event_to.substring(0, 10) + "-" + event_from.substring(0, 10));
    }//GEN-LAST:event_eventTableMouseClicked

    private void requestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestButtonActionPerformed
        int selectedRowIndex = eventTable.getSelectedRow();
//            System.out.println(selectedRowIndex);
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row first");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) eventTable.getModel();
        Event e = (Event) model.getValueAt(selectedRowIndex, 0);
//            System.out.println("selectedEvent");

        EventManagerRequests eventManagerRequests;
        try {
            eventManagerRequests = new EventManagerRequests(userData, e);
            jRightSplitPane.setBottomComponent(eventManagerRequests);

        } catch (SQLException ex) {
            Logger.getLogger(EventManagerDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
//            BusinessAdminDashboard businessAdminDashboard = new BusinessAdminDashboard(userData);
    }//GEN-LAST:event_requestButtonActionPerformed

    private void jPublicEventMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPublicEventMouseClicked
        jPrivateEvent.setBackground(Color.white);
        jPublicEvent.setBackground(Color.CYAN);

        try {
            //Refresh Table Data
            populateTableData("PUBLIC");
        } catch (SQLException ex) {
        }

        publicClick = 1;
        privateClick = 0;
    }//GEN-LAST:event_jPublicEventMouseClicked

    private void jPublicEventMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPublicEventMouseEntered
        jPublicEvent.setBackground(Color.CYAN);
    }//GEN-LAST:event_jPublicEventMouseEntered

    private void jPublicEventMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPublicEventMouseExited
        if (privateClick == 0 && publicClick == 1) {
            jPublicEvent.setBackground(Color.CYAN);
            return;
        }
        jPublicEvent.setBackground(Color.white);
        publicClick = 0;
    }//GEN-LAST:event_jPublicEventMouseExited

    private void CateringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CateringActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CateringActionPerformed

    private void populateTableData(String type) throws SQLException {
//        System.out.println("dfjb");
        DefaultTableModel dtmodel = (DefaultTableModel) eventTable.getModel();
        dtmodel.setRowCount(0);
//        ArrayList<Event> eventList = new ArrayList<>(); 

        if (type.equalsIgnoreCase("all")) {
            ArrayList<Event> eventList = eventService.getEventsListService();
            for (Event e : eventList) {

                if (e.status.equalsIgnoreCase("assigned manager")) {
                    Object[] obj = new Object[7];
                    obj[0] = e;
                    obj[1] = e.eventName;
                    obj[2] = e.eventType;
                    obj[3] = e.eventDescription;
                    obj[4] = e.eventArea;
                    obj[5] = e.atendeesCount;
                    obj[6] = e.status;
                    dtmodel.addRow(obj);
                }
            }

        } else if (type.equalsIgnoreCase("private")) {
            ArrayList<Event> eventList = eventService.getEventsListService();
            for (Event e : eventList) {

                if (e.status.equalsIgnoreCase("assigned manager") && e.eventType.equalsIgnoreCase("private")) {
                    Object[] obj = new Object[7];
                    obj[0] = e;
                    obj[1] = e.eventName;
                    obj[2] = e.eventType;
                    obj[3] = e.eventDescription;
                    obj[4] = e.eventArea;
                    obj[5] = e.atendeesCount;
                    obj[6] = e.status;
                    dtmodel.addRow(obj);
                }
            }
        } else if (type.equalsIgnoreCase("public")) {
            ArrayList<Event> eventList = eventService.getEventsListService();
            for (Event e : eventList) {

                if (e.status.equalsIgnoreCase("assigned manager") && e.eventType.equalsIgnoreCase("public")) {
                    Object[] obj = new Object[7];
                    obj[0] = e;
                    obj[1] = e.eventName;
                    obj[2] = e.eventType;
                    obj[3] = e.eventDescription;
                    obj[4] = e.eventArea;
                    obj[5] = e.atendeesCount;
                    obj[6] = e.status;
                    dtmodel.addRow(obj);
                }
            }
        }
//        ArrayList<Catering> cateringFilteredList = new ArrayList<>();
//        ArrayList<TravelAgent> travelAgentFilteredList = new ArrayList<>();

//        if(type.equalsIgnoreCase("HOTEL")){
//            hotelFilteredList = workRequestController.getHotelEnterpriseData(businessAdminId, "ACCEPTED"); 
//            for(Hotel ht: hotelFilteredList){
//                Object[] obj = new Object[7];
//                obj[0] = ht;
//                obj[1] = "HOTEL";
//                obj[2] = ht.getHotelAddress();
//                obj[3] = ht.getHotelArea();
//                obj[4] = ht.getCapacity();
//                obj[5] = ht.getEmail();
//                obj[6] = ht.getPhone();
//                dtmodel.addRow(obj);
//            }
//        } else if(type.equalsIgnoreCase("CATERING")){
//            cateringFilteredList = workRequestController.getCateringEnterpriseData(businessAdminId, "ACCEPTED");
//            for(Catering ct: cateringFilteredList){
//                Object[] obj = new Object[7];
//                obj[0] = ct;
//                obj[1] = "CATERING";
//                obj[2] = ct.getCateringAddress();
//                obj[3] = ct.getCateringArea();
//                obj[4] = ct.getCapacity();
//                obj[5] = ct.getEmail();
//                obj[6] = ct.getPhone();
//                dtmodel.addRow(obj);
//            }
//        } else if(type.equalsIgnoreCase("TRAVEL")){
//            travelAgentFilteredList = workRequestController.getTravelAgentEnterpriseData(businessAdminId, "ACCEPTED"); 
//            for(TravelAgent ta: travelAgentFilteredList){
//                Object[] obj = new Object[7];
//                obj[0] = ta;
//                obj[1] = "TRAVEL";
//                obj[2] = ta.getTravelAgentAddress();
//                obj[3] = ta.getTravelAgentArea();
//                obj[4] = ta.getCapacity();
//                obj[5] = ta.getEmail();
//                obj[6] = ta.getPhone();
//                dtmodel.addRow(obj);
//            }
//        } else {
//            //Load hotel data
//            hotelFilteredList = workRequestController.getHotelEnterpriseData(businessAdminId, "ACCEPTED"); //TODO: Pass toId from USER table
//            for(Hotel ht: hotelFilteredList){
//                Object[] obj = new Object[7];
//                obj[0] = ht;
//                obj[1] = "HOTEL";
//                obj[2] = ht.getHotelAddress();
//                obj[3] = ht.getHotelArea();
//                obj[4] = ht.getCapacity();
//                obj[5] = ht.getEmail();
//                obj[6] = ht.getPhone();
//                dtmodel.addRow(obj);
//            }
//            //Load catering data
//            cateringFilteredList = workRequestController.getCateringEnterpriseData(businessAdminId, "ACCEPTED");
//            for(Catering ct: cateringFilteredList){
//                Object[] obj = new Object[7];
//                obj[0] = ct;
//                obj[1] = "CATERING";
//                obj[2] = ct.getCateringAddress();
//                obj[3] = ct.getCateringArea();
//                obj[4] = ct.getCapacity();
//                obj[5] = ct.getEmail();
//                obj[6] = ct.getPhone();
//                dtmodel.addRow(obj);
//            }
//            //Load travelAgent data
//            travelAgentFilteredList = workRequestController.getTravelAgentEnterpriseData(businessAdminId, "ACCEPTED"); 
//            for(TravelAgent ta: travelAgentFilteredList){
//                Object[] obj = new Object[7];
//                obj[0] = ta;
//                obj[1] = "TRAVEL";
//                obj[2] = ta.getTravelAgentAddress();
//                obj[3] = ta.getTravelAgentArea();
//                obj[4] = ta.getCapacity();
//                obj[5] = ta.getEmail();
//                obj[6] = ta.getPhone();
//                dtmodel.addRow(obj);
//            }
//        } 
    }

    private void populateCardData() throws SQLException {

        //Load Icons
        jPrivateEvent.setIcon(new ImageIcon(getClass().getResource("/com/iris/ui/icons/private.png")));
        jPublicEvent.setIcon(new ImageIcon(getClass().getResource("/com/iris/ui/icons/public.png")));

        //Set Description
        jPrivateEvent.setDescription("Private Events");
        jPublicEvent.setDescription("Public Events");

        ArrayList<Event> publicCompletedEventList = new ArrayList<>();
        eventController.getPublicEventList().stream()
                .filter(evt -> evt.getStatus().equalsIgnoreCase("ASSIGNED MANAGER"))
                .forEach(evt -> publicCompletedEventList.add(evt));

        ArrayList<Event> privateCompletedEventList = new ArrayList<>();
        eventController.getPrivateEventList().stream()
                .filter(evt -> evt.getStatus().equalsIgnoreCase("ASSIGNED MANAGER"))
                .forEach(evt -> privateCompletedEventList.add(evt));
        //Assign Request Values
        jPrivateEvent.setValues("# " + privateCompletedEventList.size());
        jPublicEvent.setValues("# " + publicCompletedEventList.size());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.iris.ui.resources.TextField Accomodation;
    private com.iris.ui.resources.TextField AccomodationCount;
    private com.iris.ui.resources.TextField CaterCount;
    private com.iris.ui.resources.TextField Catering;
    private com.iris.ui.resources.TextField EmailId;
    private com.iris.ui.resources.TextField EventDate;
    private com.iris.ui.resources.TextField Name;
    private com.iris.ui.resources.TextField PhoneNumber;
    private com.iris.ui.resources.TextField PostalCode;
    private com.iris.ui.resources.TextField Travel;
    private com.iris.ui.resources.TextField TravelCount;
    private com.iris.ui.resources.Table eventTable;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLocation2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private com.iris.ui.resources.Card jPrivateEvent;
    private com.iris.ui.resources.Card jPublicEvent;
    private com.iris.ui.resources.ButtonBadges jRefreshTableBtn2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private com.iris.ui.resources.Button requestButton;
    // End of variables declaration//GEN-END:variables
}
