/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package elearning.ui.student;

import elearning.models.CourseModel;
import elearning.models.ProfCourseSubjectMapModel;
import elearning.models.ProfessorCourseModel;
import elearning.models.ProfessorDataModel;
import elearning.models.ProfessorRatingModel;
import elearning.models.SemisterModel;
import elearning.models.StudentCourseModel;
import elearning.models.StudentDataModel;
import elearning.models.UserDefaultDataModel;
import elearning.models.UserModel;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Snehal
 */
public class StudentCourseRegisterPanel extends javax.swing.JPanel {

    JPanel studentContentPanel;
    UserModel userObj;
    UserDefaultDataModel userDefaultDataObj;
    ProfessorDataModel professorDataObj;
    StudentDataModel studentDataObj;

    /**
     * Creates new form StudentCourseRegisterPanel
     *
     * @param studentContentPanel
     * @param professorDataObj
     * @param userDefaultDataObj
     * @param userObj
     * @param studentDataObj
     */
    public StudentCourseRegisterPanel(JPanel studentContentPanel,
            ProfessorDataModel professorDataObj,
            UserDefaultDataModel userDefaultDataObj,
            UserModel userObj,
            StudentDataModel studentDataObj) {
        initComponents();
        this.studentContentPanel = studentContentPanel;
        this.professorDataObj = professorDataObj;
        this.userDefaultDataObj = userDefaultDataObj;
        this.userObj = userObj;
        this.studentDataObj = studentDataObj;

        startDateTB.setEditable(false);
        endDateTB.setEditable(false);

        loadTermDetails();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        termCB = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        subjectCB = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        courseCB = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        professorCB = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        startDateTB = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        endDateTB = new javax.swing.JTextField();
        SaveButton = new javax.swing.JButton();
        ratingLabel = new javax.swing.JLabel();
        professorErrorLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(767, 767));
        setPreferredSize(new java.awt.Dimension(500, 499));

        jLabel10.setBackground(new java.awt.Color(255, 255, 0));
        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 204, 0));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Register Course");

        jLabel2.setText("Term  :");

        termCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        termCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termCBActionPerformed(evt);
            }
        });

        jLabel3.setText("Subject  :");

        subjectCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        subjectCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectCBActionPerformed(evt);
            }
        });

        jLabel4.setText("Course  :");

        courseCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        courseCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseCBActionPerformed(evt);
            }
        });

        jLabel5.setText("Professor  :");

        professorCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        professorCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                professorCBActionPerformed(evt);
            }
        });

        jLabel6.setText("Start Date  :");

        jLabel7.setText("End Date  :");

        SaveButton.setBackground(new java.awt.Color(51, 153, 255));
        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(364, 364, 364)
                        .addComponent(jLabel10)
                        .addGap(0, 130, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(165, 165, 165))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(professorErrorLabel)
                    .addComponent(SaveButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(subjectCB, 0, 189, Short.MAX_VALUE)
                            .addComponent(termCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(courseCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(professorCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ratingLabel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(endDateTB, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(startDateTB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(termCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(subjectCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(courseCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(professorCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ratingLabel))
                .addGap(8, 8, 8)
                .addComponent(professorErrorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startDateTB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(endDateTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(SaveButton)
                .addContainerGap(121, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void termCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termCBActionPerformed
        // TODO add your handling code here:
        if (this.termCB.getSelectedItem() != null) {
            String termName = this.termCB.getSelectedItem().toString();
            if (termName.equalsIgnoreCase("--Select--")) {
                this.termCB.removeAllItems();
            } else {
                loadSubjectDetails(termName);
            }
        }
    }//GEN-LAST:event_termCBActionPerformed

    private void subjectCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectCBActionPerformed
        // TODO add your handling code here:
        if (this.subjectCB.getSelectedItem() != null) {
            String termName = this.termCB.getSelectedItem().toString();
            String subName = this.subjectCB.getSelectedItem().toString();
            if (termName.equalsIgnoreCase("--Select--")) {
                this.subjectCB.removeAllItems();
            } else if (!(termName.equalsIgnoreCase("--Select--"))
                    && !(subName.equalsIgnoreCase("--Select--"))) {
                loadCourseDetails(termName, subName);
            }
        }
    }//GEN-LAST:event_subjectCBActionPerformed

    private void courseCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseCBActionPerformed
        // TODO add your handling code here:
        if (this.courseCB.getSelectedItem() != null) {
            professorErrorLabel.setText("");
            String courseName = this.courseCB.getSelectedItem().toString();
            if (courseName.equalsIgnoreCase("--Select--")) {
                this.courseCB.removeAllItems();
            } else if (!courseName.equalsIgnoreCase("--Select--")) {
                loadProfessorDetails(courseName);
            }
        }
    }//GEN-LAST:event_courseCBActionPerformed

    private void professorCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_professorCBActionPerformed
        // TODO add your handling code here:
        if (this.professorCB.getSelectedItem() != null) {
            String courseName = this.courseCB.getSelectedItem().toString();
            String profName = this.professorCB.getSelectedItem().toString();
            if (!courseName.equalsIgnoreCase("--Select--")
                    && !profName.equalsIgnoreCase("--Select--")) {
                loadStartDateEndDate(courseName, profName);
            }

        }
    }//GEN-LAST:event_professorCBActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        // TODO add your handling code here:
        String termName = this.termCB.getSelectedItem().toString();
        String subName = this.subjectCB.getSelectedItem().toString();
        String courseName = this.courseCB.getSelectedItem().toString();
        String profName = this.professorCB.getSelectedItem().toString();
        String stDate = this.startDateTB.getText();
        String endDate = this.endDateTB.getText();

        StudentCourseModel studentCourseObj = new StudentCourseModel();

        studentCourseObj.setStudentName(userObj.getFullName());
        studentCourseObj.setSemisterName(termName);
        studentCourseObj.setSubjectName(subName);
        studentCourseObj.setCourseName(courseName);
        studentCourseObj.setProfessorName(profName);
        studentCourseObj.setStartDate(stDate);
        studentCourseObj.setEndDate(endDate);
        studentCourseObj.setStatus("Enrolled");

        this.studentDataObj.getStudentCourseLi().add(studentCourseObj);

        JOptionPane.showMessageDialog(null, "Course Enrolled Successfully!");

        StudentTarnscriptPanel transciptPanel = new StudentTarnscriptPanel(
                studentContentPanel, studentDataObj, userObj);
        studentContentPanel.add("StudentTarnscript", transciptPanel);
        CardLayout layout = (CardLayout) studentContentPanel.getLayout();
        layout.next(studentContentPanel);
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void loadTermDetails() {
        if (this.userDefaultDataObj.getSemisterSubList() != null
                && !this.userDefaultDataObj.getSemisterSubList().isEmpty()) {
            DefaultComboBoxModel dcb = (DefaultComboBoxModel) termCB.getModel();
            dcb.removeAllElements();
            dcb.addElement("--Select--");
            for (SemisterModel semisterObj : this.userDefaultDataObj.getSemisterSubList()) {
                dcb.addElement(semisterObj.getSemisterName());
            }
        }
    }

    private void loadSubjectDetails(final String termName) {
        if (this.userDefaultDataObj.getSemisterSubList() != null
                && !this.userDefaultDataObj.getSemisterSubList().isEmpty()) {
            DefaultComboBoxModel subcb = (DefaultComboBoxModel) subjectCB.getModel();
            subcb.removeAllElements();
            subcb.addElement("--Select--");

            for (SemisterModel semisterObj : this.userDefaultDataObj.getSemisterSubList()) {
                if (semisterObj.getSemisterName().equalsIgnoreCase(termName)) {
                    for (CourseModel courseObj : semisterObj.getSubjects()) {
                        subcb.addElement(courseObj.getSubjectName());
                    }
                }
            }
        }
    }

    private void loadCourseDetails(final String termName, final String subjectName) {
        if (this.userDefaultDataObj.getSemisterSubList() != null
                && !this.userDefaultDataObj.getSemisterSubList().isEmpty()) {
            DefaultComboBoxModel coursecb = (DefaultComboBoxModel) courseCB.getModel();
            coursecb.removeAllElements();
            coursecb.addElement("--Select--");
            Set<String> coursSet = new HashSet<>();
            for (SemisterModel semisterObj : this.userDefaultDataObj.getSemisterSubList()) {
                if (semisterObj.getSemisterName().equalsIgnoreCase(termName)) {
                    for (CourseModel courseObj : semisterObj.getSubjects()) {
                        if (courseObj.getSubjectName().equalsIgnoreCase(subjectName)) {
                            coursSet.add(courseObj.getCourseName());
                        }
                    }
                }
            }
            if (!coursSet.isEmpty()) {
                coursecb.addAll(coursSet);
            }
        }
    }

    private void loadProfessorDetails(final String courseName) {
        DefaultComboBoxModel profcb = (DefaultComboBoxModel) professorCB.getModel();
        profcb.removeAllElements();
        profcb.addElement("--Select--");
        int index = 0;
        if (this.professorDataObj.getProfessorCourseLi() != null
                && !this.professorDataObj.getProfessorCourseLi().isEmpty()) {
            for (ProfessorCourseModel profCourseObj : this.professorDataObj.getProfessorCourseLi()) {
                for (ProfCourseSubjectMapModel mapObj : profCourseObj.getProfCourseSubjectLi()) {
                    if ((mapObj.getCourseName().equalsIgnoreCase(courseName))
                            && (!mapObj.getStatus().equalsIgnoreCase("Completed"))) {
                        profcb.addElement(profCourseObj.getProfessorName());
                        index++;
                    }
                }
            }
        }
        if (index == 0) {
            professorErrorLabel.setText("");
            professorErrorLabel.setText("No professor available for selected course !!!");
        }
    }

    private void loadStartDateEndDate(final String courseName, final String profName) {
        if (this.professorDataObj.getProfessorCourseLi() != null
                && !this.professorDataObj.getProfessorCourseLi().isEmpty()) {
            for (ProfessorCourseModel profCourseObj : this.professorDataObj.getProfessorCourseLi()) {
                if (profCourseObj.getProfessorName().equalsIgnoreCase(profName)) {
                    for (ProfCourseSubjectMapModel mapObj : profCourseObj.getProfCourseSubjectLi()) {
                        if (mapObj.getCourseName().equalsIgnoreCase(courseName)) {
                            startDateTB.setText("");
                            startDateTB.setText(mapObj.getStartDate());
                            endDateTB.setText("");
                            endDateTB.setText(mapObj.getEndDate());

                            int rating = 0;
                            int ratingCount = 0;
                            int ratingTotal = 0;

                            if (this.professorDataObj.getProfessorRatingLi() != null
                                    && !this.professorDataObj.getProfessorRatingLi().isEmpty()) {
                                for (ProfessorRatingModel rateObj : this.professorDataObj.getProfessorRatingLi()) {
                                    if ((rateObj.getProfessorName().equalsIgnoreCase(profName)
                                            && (rateObj.getCourseName().equalsIgnoreCase(courseName)))) {
                                        ratingCount++;
                                        ratingTotal = ratingTotal + rateObj.getRating();
                                    }
                                }
                            }
                            rating = (ratingCount > 0) ? Math.round(ratingTotal / ratingCount) : 0;
                            String rateStars = getRating(rating);
                            ratingLabel.setText(rateStars);
                            ratingLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
                            ratingLabel.setForeground(Color.red);

                        }
                    }
                }
            }
        }
    }

    private String getRating(int rateValue) {
        switch (rateValue) {
            case 0 -> {
                return "Un Rated";
            }
            case 1 -> {
                return "*";
            }
            case 2 -> {
                return "* *";
            }
            case 3 -> {
                return "* * *";
            }
            case 4 -> {
                return "* * * *";
            }
            case 5 -> {
                return "* * * * *";
            }
        }
        return "Un Rated";
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SaveButton;
    private javax.swing.JComboBox<String> courseCB;
    private javax.swing.JTextField endDateTB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> professorCB;
    private javax.swing.JLabel professorErrorLabel;
    private javax.swing.JLabel ratingLabel;
    private javax.swing.JTextField startDateTB;
    private javax.swing.JComboBox<String> subjectCB;
    private javax.swing.JComboBox<String> termCB;
    // End of variables declaration//GEN-END:variables
}
