/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package elearning.ui.professor;

import elearning.models.ProfCourseSubjectMapModel;
import elearning.models.ProfessorCourseModel;
import elearning.models.ProfessorDataModel;
import elearning.models.StudentCourseModel;
import elearning.models.StudentDataModel;
import elearning.models.UserDefaultDataModel;
import elearning.models.UserModel;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Aayuka Nirawade
 */
public class ProfessorManageCoursePanel extends javax.swing.JPanel {

    JPanel profContentPanel;
    ProfessorDataModel professorDataObj;
    StudentDataModel studentDataObj;
    UserModel userObj;
    UserDefaultDataModel userDefaultDataObj;

    /**
     * Creates new form ProfessorManageCoursePanel
     *
     * @param profContentPanel
     * @param userDefaultDataObj
     * @param userObj
     * @param professorDataObj
     * @param studentDataObj
     */
    public ProfessorManageCoursePanel(JPanel profContentPanel,
            UserDefaultDataModel userDefaultDataObj,
            UserModel userObj,
            ProfessorDataModel professorDataObj,
            StudentDataModel studentDataObj) {
        initComponents();

        this.userDefaultDataObj = userDefaultDataObj;
        this.userObj = userObj;
        this.profContentPanel = profContentPanel;
        this.professorDataObj = professorDataObj;
        this.studentDataObj = studentDataObj;

        loadTermDetails();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        termCB = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        subjectCB = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        courseCB = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        startDateTB = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        EndDateTB = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        StartCourseButton = new javax.swing.JButton();
        CompleteCourseButton = new javax.swing.JButton();
        UpdateCourseButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        CourseStatusLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Manage Course(s)");

        jLabel2.setText("Term  :");

        termCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        termCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termCBActionPerformed(evt);
            }
        });

        jLabel3.setText("Subject  :");

        subjectCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        subjectCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectCBActionPerformed(evt);
            }
        });

        jLabel4.setText("Course  :");

        courseCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        courseCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseCBActionPerformed(evt);
            }
        });

        jLabel5.setText("Start Date  :");

        jLabel6.setText("End Date  :");

        StartCourseButton.setBackground(new java.awt.Color(51, 153, 255));
        StartCourseButton.setText("Start Course");
        StartCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartCourseButtonActionPerformed(evt);
            }
        });

        CompleteCourseButton.setBackground(new java.awt.Color(51, 153, 255));
        CompleteCourseButton.setText("Complete Course");
        CompleteCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompleteCourseButtonActionPerformed(evt);
            }
        });

        UpdateCourseButton.setBackground(new java.awt.Color(51, 153, 255));
        UpdateCourseButton.setText("Update Course");
        UpdateCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateCourseButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Status  :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 47, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(216, 216, 216))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(StartCourseButton)
                        .addGap(85, 85, 85)
                        .addComponent(CompleteCourseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(UpdateCourseButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(termCB, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(subjectCB, 0, 224, Short.MAX_VALUE)
                                        .addComponent(courseCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(startDateTB, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38)
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(EndDateTB, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(CourseStatusLabel))))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(termCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(subjectCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(courseCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(startDateTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(EndDateTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(CourseStatusLabel))
                .addGap(5, 5, 5)
                .addComponent(UpdateCourseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StartCourseButton)
                    .addComponent(CompleteCourseButton))
                .addContainerGap(65, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void termCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termCBActionPerformed
        // TODO add your handling code here:
        if (this.termCB.getSelectedItem() != null) {
            String termName = this.termCB.getSelectedItem().toString();
            if (termName.equalsIgnoreCase("--Select--")) {
                this.termCB.removeAllItems();
            } else {
                loadSubjectDetails(termName);
            }
        }
    }//GEN-LAST:event_termCBActionPerformed

    private void subjectCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectCBActionPerformed
        // TODO add your handling code here:
        if (this.subjectCB.getSelectedItem() != null) {
            String termName = this.termCB.getSelectedItem().toString();
            String subName = this.subjectCB.getSelectedItem().toString();
            if (termName.equalsIgnoreCase("--Select--")) {
                this.subjectCB.removeAllItems();
            } else if (!(termName.equalsIgnoreCase("--Select--"))
                    && !(subName.equalsIgnoreCase("--Select--"))) {
                loadCourseDetails(termName, subName);
            }
        }
    }//GEN-LAST:event_subjectCBActionPerformed

    private void courseCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseCBActionPerformed
        // TODO add your handling code here:
        if (this.courseCB.getSelectedItem() != null) {
            String termName = this.termCB.getSelectedItem().toString();
            String subName = this.subjectCB.getSelectedItem().toString();
            String courseName = this.courseCB.getSelectedItem().toString();
            for (ProfessorCourseModel profCourseObj : this.professorDataObj.getProfessorCourseLi()) {
                if (profCourseObj.getProfessorName().equalsIgnoreCase(userObj.getFullName())
                        && profCourseObj.getSemisterName().equalsIgnoreCase(termName)) {
                    for (ProfCourseSubjectMapModel mapObj : profCourseObj.getProfCourseSubjectLi()) {
                        if (mapObj.getCourseName().equalsIgnoreCase(courseName)
                                && mapObj.getSubjectName().equalsIgnoreCase(subName)) {
                            startDateTB.setText(mapObj.getStartDate());
                            EndDateTB.setText(mapObj.getEndDate());
                            CourseStatusLabel.setText("");
                            CourseStatusLabel.setText(mapObj.getStatus());
                            if (mapObj.getStatus().equalsIgnoreCase("Planned")) {
                                CourseStatusLabel.setForeground(Color.ORANGE);
                                StartCourseButton.setVisible(true);
                                UpdateCourseButton.setVisible(true);
                                CompleteCourseButton.setVisible(true);
                            } else if (mapObj.getStatus().equalsIgnoreCase("In Progress")) {
                                CourseStatusLabel.setForeground(Color.MAGENTA);
                                StartCourseButton.setVisible(false);
                                UpdateCourseButton.setVisible(false);
                            } else if (mapObj.getStatus().equalsIgnoreCase("Completed")) {
                                CourseStatusLabel.setForeground(Color.GREEN);
                                StartCourseButton.setVisible(false);
                                UpdateCourseButton.setVisible(false);
                                CompleteCourseButton.setVisible(false);
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_courseCBActionPerformed

    private void StartCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartCourseButtonActionPerformed
        // TODO add your handling code here:
        String termName = this.termCB.getSelectedItem().toString();
        String subName = this.subjectCB.getSelectedItem().toString();
        String courseName = this.courseCB.getSelectedItem().toString();
        if (this.professorDataObj.getProfessorCourseLi() != null
                && !this.professorDataObj.getProfessorCourseLi().isEmpty()) {
            for (ProfessorCourseModel profCourseObj : this.professorDataObj.getProfessorCourseLi()) {
                if (profCourseObj.getProfessorName().equalsIgnoreCase(userObj.getFullName())
                        && profCourseObj.getSemisterName().equalsIgnoreCase(termName)) {
                    for (ProfCourseSubjectMapModel mapObj : profCourseObj.getProfCourseSubjectLi()) {
                        if (mapObj.getCourseName().equalsIgnoreCase(courseName)
                                && mapObj.getSubjectName().equalsIgnoreCase(subName)) {
                            mapObj.setStatus("In Progress");

                        }
                    }
                }
            }
        }
        if (this.studentDataObj.getStudentCourseLi() != null
                && !this.studentDataObj.getStudentCourseLi().isEmpty()) {
            for (StudentCourseModel stuCourseObj : this.studentDataObj.getStudentCourseLi()) {
                if ((stuCourseObj.getSemisterName().equalsIgnoreCase(termName))
                        && (stuCourseObj.getSubjectName().equalsIgnoreCase(subName))
                        && (stuCourseObj.getCourseName().equalsIgnoreCase(courseName))) {
                    stuCourseObj.setStatus("In Progress");
                }
            }
        }

        JOptionPane.showMessageDialog(null, "Course Started !");
        ProfessorTeachingHistoryPanel tachingHistory = new ProfessorTeachingHistoryPanel(
                profContentPanel, professorDataObj, userObj);
        profContentPanel.add("ProfTeachingHistory", tachingHistory);
        CardLayout layout = (CardLayout) profContentPanel.getLayout();
        layout.next(profContentPanel);
    }//GEN-LAST:event_StartCourseButtonActionPerformed

    private void CompleteCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompleteCourseButtonActionPerformed
        // TODO add your handling code here:
        String termName = this.termCB.getSelectedItem().toString();
        String subName = this.subjectCB.getSelectedItem().toString();
        String courseName = this.courseCB.getSelectedItem().toString();
        if (this.professorDataObj.getProfessorCourseLi() != null
                && !this.professorDataObj.getProfessorCourseLi().isEmpty()) {
            for (ProfessorCourseModel profCourseObj : this.professorDataObj.getProfessorCourseLi()) {
                if (profCourseObj.getProfessorName().equalsIgnoreCase(userObj.getFullName())
                        && profCourseObj.getSemisterName().equalsIgnoreCase(termName)) {
                    for (ProfCourseSubjectMapModel mapObj : profCourseObj.getProfCourseSubjectLi()) {
                        if (mapObj.getCourseName().equalsIgnoreCase(courseName)
                                && mapObj.getSubjectName().equalsIgnoreCase(subName)) {
                            mapObj.setStatus("Completed");
                        }
                    }
                }
            }
        }
        if (this.studentDataObj.getStudentCourseLi() != null
                && !this.studentDataObj.getStudentCourseLi().isEmpty()) {
            for (StudentCourseModel stuCourseObj : this.studentDataObj.getStudentCourseLi()) {
                if ((stuCourseObj.getSemisterName().equalsIgnoreCase(termName))
                        && (stuCourseObj.getSubjectName().equalsIgnoreCase(subName))
                        && (stuCourseObj.getCourseName().equalsIgnoreCase(courseName))) {
                    stuCourseObj.setStatus("Completed");
                }
            }
        }
        JOptionPane.showMessageDialog(null, "Course Completed !");
        ProfessorTeachingHistoryPanel tachingHistory = new ProfessorTeachingHistoryPanel(
                profContentPanel, professorDataObj, userObj);
        profContentPanel.add("ProfTeachingHistory", tachingHistory);
        CardLayout layout = (CardLayout) profContentPanel.getLayout();
        layout.next(profContentPanel);
    }//GEN-LAST:event_CompleteCourseButtonActionPerformed

    private void UpdateCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateCourseButtonActionPerformed
        // TODO add your handling code here:
        String termName = this.termCB.getSelectedItem().toString();
        String subName = this.subjectCB.getSelectedItem().toString();
        String courseName = this.courseCB.getSelectedItem().toString();
    }//GEN-LAST:event_UpdateCourseButtonActionPerformed

    private void loadTermDetails() {
        if (this.professorDataObj.getProfessorCourseLi() != null
                && !this.professorDataObj.getProfessorCourseLi().isEmpty()) {
            DefaultComboBoxModel dcb = (DefaultComboBoxModel) termCB.getModel();
            dcb.removeAllElements();
            dcb.addElement("--Select--");
            for (ProfessorCourseModel profCourseObj : this.professorDataObj.getProfessorCourseLi()) {
                if (profCourseObj.getProfessorName().equalsIgnoreCase(userObj.getFullName())) {
                    dcb.addElement(profCourseObj.getSemisterName());
                }
            }
        }
    }

    private void loadSubjectDetails(final String termName) {
        if (this.professorDataObj.getProfessorCourseLi() != null
                && !this.professorDataObj.getProfessorCourseLi().isEmpty()) {
            DefaultComboBoxModel subcb = (DefaultComboBoxModel) subjectCB.getModel();
            subcb.removeAllElements();
            subcb.addElement("--Select--");

            for (ProfessorCourseModel profCourseObj : this.professorDataObj.getProfessorCourseLi()) {
                if (profCourseObj.getProfessorName().equalsIgnoreCase(userObj.getFullName())
                        && profCourseObj.getSemisterName().equalsIgnoreCase(termName)) {
                    for (ProfCourseSubjectMapModel mapObj : profCourseObj.getProfCourseSubjectLi()) {
                        subcb.addElement(mapObj.getSubjectName());
                    }
                }
            }
        }
    }

    private void loadCourseDetails(final String termName, final String subName) {
        if (this.professorDataObj.getProfessorCourseLi() != null
                && !this.professorDataObj.getProfessorCourseLi().isEmpty()) {
            DefaultComboBoxModel corcb = (DefaultComboBoxModel) courseCB.getModel();
            corcb.removeAllElements();
            corcb.addElement("--Select--");

            for (ProfessorCourseModel profCourseObj : this.professorDataObj.getProfessorCourseLi()) {
                if (profCourseObj.getProfessorName().equalsIgnoreCase(userObj.getFullName())
                        && profCourseObj.getSemisterName().equalsIgnoreCase(termName)) {
                    for (ProfCourseSubjectMapModel mapObj : profCourseObj.getProfCourseSubjectLi()) {
                        if (mapObj.getSubjectName().equalsIgnoreCase(subName)) {
                            corcb.addElement(mapObj.getCourseName());
                        }
                    }
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CompleteCourseButton;
    private javax.swing.JLabel CourseStatusLabel;
    private javax.swing.JTextField EndDateTB;
    private javax.swing.JButton StartCourseButton;
    private javax.swing.JButton UpdateCourseButton;
    private javax.swing.JComboBox<String> courseCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField startDateTB;
    private javax.swing.JComboBox<String> subjectCB;
    private javax.swing.JComboBox<String> termCB;
    // End of variables declaration//GEN-END:variables
}
