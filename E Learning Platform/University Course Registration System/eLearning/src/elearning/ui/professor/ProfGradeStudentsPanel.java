/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package elearning.ui.professor;

import elearning.models.StudentCourseModel;
import elearning.models.StudentDataModel;
import elearning.models.UserModel;
import elearning.models.UserSignUpModel;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aayuka Nirawade
 */
public class ProfGradeStudentsPanel extends javax.swing.JPanel {

    JPanel profContentPanel;
    UserSignUpModel userSignUpObj;
    UserModel userObj;
    StudentDataModel studentDataObj;

    /**
     * Creates new form IssuerCertificateIssuePanel
     *
     * @param profContentPanel
     * @param userSignUpObj
     * @param userObj
     * @param studentDataObj
     */
    public ProfGradeStudentsPanel(JPanel profContentPanel,
            UserModel userObj,
            UserSignUpModel userSignUpObj,
            StudentDataModel studentDataObj) {
        initComponents();

        this.profContentPanel = profContentPanel;
        this.userObj = userObj;
        this.userSignUpObj = userSignUpObj;
        this.studentDataObj = studentDataObj;

        jTable1.setVisible(false);

        errorLabel.setText("");

        loadStudentData();
    }

    private void loadStudentData() {
        if ((this.studentDataObj.getStudentCourseLi() != null)) {
            DefaultComboBoxModel dcb = (DefaultComboBoxModel) StudentCB.getModel();
            dcb.removeAllElements();
            dcb.addElement("Select");
            Set<String> stuSet = new HashSet<>();
            for (StudentCourseModel courseObj : this.studentDataObj.getStudentCourseLi()) {
                if (courseObj.getStatus().equalsIgnoreCase("Completed")) {
                    stuSet.add(courseObj.getStudentName());
                }
            }
            dcb.addAll(stuSet);
        }
    }

    private void loadCourseData(String studentName) {
        if ((this.studentDataObj.getStudentCourseLi() != null)) {
            DefaultComboBoxModel dcb = (DefaultComboBoxModel) courseCB.getModel();
            dcb.removeAllElements();
            dcb.addElement("Select");
            Set<String> stuSet = new HashSet<>();
            for (StudentCourseModel courseObj : this.studentDataObj.getStudentCourseLi()) {
                if ((courseObj.getStudentName().equalsIgnoreCase(studentName))
                        && (courseObj.getStatus().equalsIgnoreCase("Completed"))) {
                    stuSet.add(courseObj.getCourseName());
                }
            }
            if (!stuSet.isEmpty()) {
                dcb.addAll(stuSet);
                errorLabel.setText("");
            } else {
                errorLabel.setText("No Course is Completed for the Student to set grade...");
            }
        }
    }

    private void loadTableData(final String studentName) {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);

        if (this.studentDataObj.getStudentCourseLi() != null
                && !this.studentDataObj.getStudentCourseLi().isEmpty()) {
            int rowIndex = 1;
            int statIndex = 0;
            for (StudentCourseModel studCourseObj : this.studentDataObj.getStudentCourseLi()) {
                if (studCourseObj.getStudentName().equalsIgnoreCase(studentName)) {
                    Object[] row = new Object[7];
                    row[0] = rowIndex;
                    row[1] = studCourseObj.getCourseName();
                    row[2] = studCourseObj.getSubjectName();
                    row[3] = studCourseObj.getSemisterName();
                    row[4] = studCourseObj.getProfessorName();
                    row[5] = studCourseObj.getStatus();
                    row[6] = studCourseObj.getGrade();
                    if (studCourseObj.getStatus().equalsIgnoreCase("Completed")) {
                        statIndex++;
                    }

                    dtm.addRow(row);
                    rowIndex++;
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        StudentCB = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        saveGradeButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        courseCB = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        gradeTB = new javax.swing.JTextField();
        errorLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Grade Students");

        jLabel3.setText("Student Name  :");

        StudentCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        StudentCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudentCBActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Sno", "Course", "Subject", "Term", "Professor",
                "Status", "Grade"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        saveGradeButton.setBackground(new java.awt.Color(51, 153, 255));
        saveGradeButton.setText("Save");
        saveGradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGradeButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Course  :");

        courseCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));

        jLabel4.setText("Grade  :");

        errorLabel.setForeground(new java.awt.Color(255, 0, 51));
        errorLabel.setText("jLabel5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(277, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(231, 231, 231))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(StudentCB, 0, 265, Short.MAX_VALUE)
                                .addComponent(courseCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(gradeTB, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveGradeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(StudentCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(courseCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(jLabel4))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(gradeTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(errorLabel)
                        .addComponent(saveGradeButton)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void StudentCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudentCBActionPerformed
        // TODO add your handling code here:
        if (this.StudentCB.getSelectedItem() != null) {
            String stuName = this.StudentCB.getSelectedItem().toString();
            loadCourseData(stuName);
            loadTableData(stuName);
            jTable1.setVisible(true);
        }
    }//GEN-LAST:event_StudentCBActionPerformed

    private void saveGradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGradeButtonActionPerformed
        // TODO add your handling code here:
        if (this.StudentCB.getSelectedItem() != null) {
            String stuName = this.StudentCB.getSelectedItem().toString();
            String corName = this.courseCB.getSelectedItem().toString();
            String grade = this.gradeTB.getText();
            if (this.studentDataObj.getStudentCourseLi() != null
                    && !this.studentDataObj.getStudentCourseLi().isEmpty()) {
                for (StudentCourseModel studCourseObj : this.studentDataObj.getStudentCourseLi()) {
                    if ((studCourseObj.getStudentName().equalsIgnoreCase(stuName))
                            && (studCourseObj.getCourseName().equalsIgnoreCase(corName))
                            && (studCourseObj.getStatus().equalsIgnoreCase("Completed"))) {
                        studCourseObj.setGrade(grade);
                    }
                }
            }
            loadTableData(stuName);
            JOptionPane.showMessageDialog(null, "Grade Issued !");

        }
    }//GEN-LAST:event_saveGradeButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> StudentCB;
    private javax.swing.JComboBox<String> courseCB;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JTextField gradeTB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton saveGradeButton;
    // End of variables declaration//GEN-END:variables
}
