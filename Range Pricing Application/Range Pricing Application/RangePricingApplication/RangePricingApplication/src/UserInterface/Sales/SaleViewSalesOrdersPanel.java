/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.Sales;

import TheBusiness.Business.Business;
import TheBusiness.OrderManagement.Order;
import TheBusiness.OrderManagement.OrderItem;
import TheBusiness.UserAccountManagement.UserAccount;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author harsh
 */
public class SaleViewSalesOrdersPanel extends javax.swing.JPanel {

    JPanel ContentPanel;
    Business business;
    UserAccount ua;

    /**
     * Creates new form AdminViewSalesOrdersPanel
     *
     * @param business
     * @param ua
     * @param ContentPanel
     */
    public SaleViewSalesOrdersPanel(Business business, UserAccount ua,
            JPanel ContentPanel) {
        initComponents();

        this.business = business;
        this.ContentPanel = ContentPanel;
        this.ua = ua;

//        loadSalesPersonDetails();
//        loadCustomerDetails();
//        loadSupplierDetails();
//        loadProductDetails();
        loadTableData();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        backToDashButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("View Sales & Orders");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "SNo", "Customer Name", "Product Name",
                "Flooring Price","Ceiling Price",
                "Target Price","Order Price",
                "Quantity","TotalOrderPrice","Price Performance"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        backToDashButton.setBackground(new java.awt.Color(51, 153, 255));
        backToDashButton.setText("<< Back");
        backToDashButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToDashButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(161, 161, 161)
                        .addComponent(backToDashButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backToDashButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backToDashButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToDashButtonActionPerformed
        // TODO add your handling code here:
        SalesDashboardPanel adminPanel
                = new SalesDashboardPanel(business, ua, ContentPanel);
        ContentPanel.add("SalesDash", adminPanel);
        CardLayout layout = (CardLayout) ContentPanel.getLayout();
        layout.next(ContentPanel);
    }//GEN-LAST:event_backToDashButtonActionPerformed

    private void loadSalesPersonDetails() {
//        DefaultComboBoxModel subcb = (DefaultComboBoxModel) salesPersonCB.getModel();
//        subcb.removeAllElements();
//        subcb.addElement("Select");
//        Set<String> subjSet = new HashSet<>();
//        if ((business.getUserAccountDirectory() != null)
//                && (!business.getUserAccountDirectory().getUseraccountlist().isEmpty())) {
//            for (UserAccount ua : business.getUserAccountDirectory().getUseraccountlist()) {
//                if (ua.getRole().equalsIgnoreCase("sales")) {
//                    subjSet.add(ua.getPersonId());
//                }
//            }
//            if (!subjSet.isEmpty()) {
//                subcb.addAll(subjSet);
//            }
//        }
    }

    private void loadCustomerDetails() {
//        DefaultComboBoxModel custcb = (DefaultComboBoxModel) customerCB.getModel();
//        custcb.removeAllElements();
//        custcb.addElement("Select");
//        Set<String> custSet = new HashSet<>();
//        if ((business.getCustomerDirectory() != null)
//                && (!business.getCustomerDirectory().getCustomerlist().isEmpty())) {
//            for (CustomerProfile cu : business.getCustomerDirectory().getCustomerlist()) {
//                custSet.add(cu.getCustomerId());
//            }
//        }
//
//        if (!custSet.isEmpty()) {
//            custcb.addAll(custSet);
//        }
    }

    private void loadSupplierDetails() {
//        DefaultComboBoxModel supcb = (DefaultComboBoxModel) supplierCB.getModel();
//        supcb.removeAllElements();
//        supcb.addElement("Select");
//        Set<String> supSet = new HashSet<>();
//        if ((business.getSupplierDirectory() != null)
//                && (!business.getSupplierDirectory().getSuplierList().isEmpty())) {
//            for (Supplier sp : business.getSupplierDirectory().getSuplierList()) {
//                supSet.add(sp.getName());
//            }
//        }
//        if (!supSet.isEmpty()) {
//            supcb.addAll(supSet);
//        }
    }

    private void loadProductDetails() {
//        DefaultComboBoxModel prodcb = (DefaultComboBoxModel) productCB.getModel();
//        prodcb.removeAllElements();
//        prodcb.addElement("Select");
//        if ((business.getSupplierDirectory() != null)
//                && (!business.getSupplierDirectory().getSuplierList().isEmpty())) {
//            for (Supplier su : business.getSupplierDirectory().getSuplierList()) {
//                prodcb.addAll(su.getProductCatalog().getProductList());
//            }
//        }
    }

    private void loadProductDetails(final String supName) {
//        DefaultComboBoxModel prodcb = (DefaultComboBoxModel) productCB.getModel();
//        prodcb.removeAllElements();
//        prodcb.addElement("Select");
//        if ((business.getSupplierDirectory() != null)
//                && (!business.getSupplierDirectory().getSuplierList().isEmpty())) {
//            for (Supplier su : business.getSupplierDirectory().getSuplierList()) {
//                if (su.getName().equalsIgnoreCase(supName)) {
//                    prodcb.addAll(su.getProductCatalog().getProductList());
//                }
//            }
//        }
    }

    /*
    "SNo", "Customer Name", "Supplier Name",
        "Product Name","Flooring Price","Ceiling Price",
        "Target Price","Order Price","Quantity"
     */
    private void loadTableData() {
        if (business != null) {
            if (business.getMasterOrderList() != null
                    && !business.getMasterOrderList().getOrders().isEmpty()) {
                int rowIndex = 1;
                DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                dtm.setRowCount(0);
                for (Order order : business.getMasterOrderList().getOrders()) {
                    if (order.getSalesperson().getPerson().isMatch(ua.getPersonId())) {
                        for (OrderItem ordItm : order.getOrderitems()) {
                            String pricePerf = "";
                            if (ordItm.isActualAboveTarget()) {
                                pricePerf = "Above Target";
                            } else if (ordItm.isActualBelowTarget()) {
                                pricePerf = "Below Target";
                            } else if (ordItm.isActualATTarget()) {
                                pricePerf = "At Target";
                            }
                            Object[] row = new Object[10];
                            row[0] = rowIndex;
                            row[1] = order.getCustomer().getCustomerId();
                            row[2] = ordItm.getSelectedProduct().getName();
                            row[3] = ordItm.getSelectedProduct().getFloorPrice();
                            row[4] = ordItm.getSelectedProduct().getCeilingPrice();
                            row[5] = ordItm.getSelectedProduct().getTargetPrice();
                            row[6] = ordItm.getActualPrice();
                            row[7] = ordItm.getQuantity();
                            row[8] = ordItm.getOrderItemTargetTotal();
                            row[9] = ordItm.calculatePricePerformance() + "[" + pricePerf +"]";
                            dtm.addRow(row);
                            rowIndex++;
                        }
                    }
                }
            }
        }
    }
    /*
    
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backToDashButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
